import time
import tkinter as tk
from tkinter import messagebox
from Robotic_Arm.rm_robot_interface import *
from modbus import PLCStation

# ‚öôÔ∏è Kh·ªüi t·∫°o
robot = RoboticArm(rm_thread_mode_e.RM_TRIPLE_MODE_E)
handle = robot.rm_create_robot_arm("192.168.1.18", 8080)
print("robotic arm ID:", handle.id)

is_sumilation = True  # Bi·∫øn to√†n c·ª•c ƒë·ªÉ x√°c ƒë·ªãnh c√≥ ch·∫°y m√¥ ph·ªèng hay kh√¥ng

# L·∫•y th√¥ng tin ph·∫ßn m·ªÅm robot
software_info = robot.rm_get_arm_software_info()
if software_info[0] == 0:
    print("\n================== Arm Software Information ==================")
    print("Arm Model: ", software_info[1]['product_version'])
    print("Algorithm Library Version: ", software_info[1]['algorithm_info']['version'])
    print("Control Layer Software Version: ", software_info[1]['ctrl_info']['version'])
    print("Dynamics Version: ", software_info[1]['dynamic_info']['model_version'])
    print("Planning Layer Software Version: ", software_info[1]['plan_info']['version'])
    print("==============================================================\n")
else:
    print("\nFailed to get arm software information, Error code: ", software_info[0], "\n")

plc = PLCStation(serial_port="COM5", baudrate=9600, timeout=1)
 
# üì¶ L∆∞u ƒëi·ªÉm
point_list = []

def get_tcp_pose():
    state = robot.rm_get_current_arm_state()
    return state[1]["pose"] if state[0] == 0 else None

def save_point():
    pose = get_tcp_pose()
    if not pose:
        messagebox.showerror("L·ªói", "Kh√¥ng l·∫•y ƒë∆∞·ª£c pose t·ª´ robot.")
        return

    plc_choice = plc_var.get()
    move_type = move_var.get()

    plc_outputs = {
        "Bit 0": [True, False, False, False, False],
        "Bit 1": [False, True, False, False, False],
        "Bit 2": [False, False, True, False, False],
        "T·∫Øt":   [False, False, False, False, False]
    }
    plc_out = plc_outputs.get(plc_choice, [False] * 5)

    point_list.append({
        "pose": pose,
        "plc_output": plc_out,
        "move_type": move_type
    })

    listbox.insert(tk.END, f"ƒêi·ªÉm {len(point_list)} - {move_type} - {plc_choice}")

def run_sequence():
    for i, pt in enumerate(point_list):
        listbox.selection_clear(0, tk.END)
        listbox.selection_set(i)
        pose = pt["pose"]
        move_type = pt["move_type"]

        # Ch·ªçn lo·∫°i chuy·ªÉn ƒë·ªông
        if move_type == "ƒêi kh·ªõp (movej_p)":
            robot.rm_movej_p(pose, v=10, r=0, connect=0, block=1)
        elif move_type == "ƒêi tuy·∫øn t√≠nh (movel)":
            robot.rm_movel(pose, v=10, r=0, connect=0, block=1)
        elif move_type == "ƒêi spline (moves)":
            robot.rm_moves(pose, v=10, r=0, connect=0, block=1)
        # elif move_type == "ƒêi cung tr√≤n (movec)":
        #     # V·ªõi movec c·∫ßn 2 ƒëi·ªÉm: trung gian v√† ƒë√≠ch. Ta d√πng c√πng 1 ƒëi·ªÉm gi·∫£ l·∫≠p.
        #     robot.rm_movec(pose, pose, v=10, r=0, loop=1, connect=0, block=1)
        else:
            print(f"‚ùå Kh√¥ng x√°c ƒë·ªãnh lo·∫°i di chuy·ªÉn: {move_type}")
            continue
        
        if is_sumilation:
            plc.write_datas_output(254, [False, False, False, False, False])
        else:
            plc.write_datas_output(254, pt["plc_output"])

        root.update()
        time.sleep(0.5)

    messagebox.showinfo("Ho√†n t·∫•t", "Robot ƒë√£ ch·∫°y h·∫øt ch∆∞∆°ng tr√¨nh.")

# üñºÔ∏è Giao di·ªán Tkinter
root = tk.Tk()
root.title("ƒêi·ªÅu khi·ªÉn Robot + PLC")

frame = tk.Frame(root)
frame.pack(padx=20, pady=10)

# ‚öôÔ∏è PLC n√∫t b·∫•m
plc_var = tk.StringVar(value="T·∫Øt") 
tk.Label(frame, text="Ch·ªçn tr·∫°ng th√°i PLC khi l∆∞u ƒëi·ªÉm:").pack(anchor='w')
plc_frame = tk.Frame(frame)
plc_frame.pack(pady=5)

def toggle_welding():
    if plc_var.get() == "Bit 0":
        plc_var.set("T·∫Øt")
        btn_welding_toggle.config(text="‚õî T·∫Øt h√†n")
    else:
        plc_var.set("Bit 0")
        btn_welding_toggle.config(text="üîå B·∫≠t h√†n")

btn_welding_toggle = tk.Button(plc_frame, text="‚õî T·∫Øt h√†n", width=20,
                                command=toggle_welding)
btn_welding_toggle.pack(side='left', padx=5)

def set_simulation():
    global is_sumilation
    is_sumilation = not is_sumilation
    if is_sumilation:
        btn_move_simulation.config(text="Ch·∫°y m√¥ ph·ªèng")
    else:
        btn_move_simulation.config(text="Ch·∫°y th·ª±c t·∫ø")

btn_move_simulation = tk.Button(plc_frame, text="Ch·∫°y m√¥ ph·ªèng", width=20,
                                command=set_simulation)
btn_move_simulation.pack(side='left', padx=5)

# ‚öôÔ∏è Di chuy·ªÉn robot
move_var = tk.StringVar(value="ƒêi tuy·∫øn t√≠nh (movel)")
tk.Label(frame, text="Ch·ªçn ki·ªÉu di chuy·ªÉn robot:").pack(anchor='w')
move_frame = tk.Frame(frame)
move_frame.pack(pady=5)

def auto_save_and_reset(move_type):
    move_var.set(move_type)
    save_point()
    reset_buttons()

movej_btn = tk.Button(move_frame, text="üîß ƒêi kh·ªõp (movej_p)", width=20,
                      command=lambda: auto_save_and_reset("ƒêi kh·ªõp (movej_p)"))
movej_btn.pack(side='left', padx=5)

movel_btn = tk.Button(move_frame, text="üìê ƒêi tuy·∫øn t√≠nh (movel)", width=20,
                      command=lambda: auto_save_and_reset("ƒêi tuy·∫øn t√≠nh (movel)"))
movel_btn.pack(side='left', padx=5)

# üîß C√°c n√∫t ch·ª©c nƒÉng ch√≠nh
def reset_buttons():
    movej_btn.config(state='normal', bg="SystemButtonFace")
    movel_btn.config(state='normal', bg="SystemButtonFace")

tk.Button(frame, text="‚ñ∂Ô∏è Ch·∫°y tu·∫ßn t·ª±", command=run_sequence).pack(pady=5)

listbox = tk.Listbox(root, width=60, height=10)
listbox.pack(pady=10)

def reset_all():
    point_list.clear()
    listbox.delete(0, tk.END)
    reset_buttons()

tk.Button(root, text="üîÑ X√≥a t·∫•t c·∫£ & b·∫Øt ƒë·∫ßu l·∫°i", command=reset_all).pack(pady=5)

root.mainloop()